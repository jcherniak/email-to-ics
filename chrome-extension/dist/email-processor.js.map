{
  "version": 3,
  "sources": ["../email-processor.js"],
  "sourcesContent": ["// EmailProcessor - Ported from PHP to JavaScript\n// Shared model configuration will be imported by background.js before this script\n\nclass EmailProcessor {\n    constructor() {\n        this.openRouterKey = '';\n        this.postmarkApiKey = '';\n        this.fromEmail = '';\n        this.inboundConfirmedEmail = '';\n        this.toTentativeEmail = '';\n        this.toConfirmedEmail = '';\n        this.aiModel = 'google/gemini-2.5-pro';\n        this.maxTokens = 20000;\n        this.requestTimeout = 120000; // 2 minutes timeout\n        this.availableModels = [];\n        \n        // Load settings from storage\n        this.initializeFromStorage();\n    }\n\n    getOfflineAllowedModels() {\n        if (typeof ALLOWED_MODELS === 'undefined') {\n            throw new Error('Shared model configuration not loaded - models-config.js import failed');\n        }\n        return ALLOWED_MODELS;\n    }\n\n    async initializeFromStorage() {\n        try {\n            console.log('EmailProcessor: Loading settings from storage...');\n            const settings = await this.getStoredSettings();\n            console.log('EmailProcessor: Settings loaded:', Object.keys(settings || {}));\n            \n            if (settings) {\n                this.openRouterKey = settings.openRouterKey || '';\n                this.postmarkApiKey = settings.postmarkApiKey || '';\n                this.fromEmail = settings.fromEmail || '';\n                this.inboundConfirmedEmail = settings.inboundConfirmedEmail || '';\n                this.toTentativeEmail = settings.toTentativeEmail || '';\n                this.toConfirmedEmail = settings.toConfirmedEmail || '';\n                this.aiModel = settings.aiModel || 'google/gemini-2.5-pro';\n            }\n            \n            console.log('EmailProcessor: Loading available models...');\n            // Load available models with timeout\n            this.availableModels = await Promise.race([\n                this.loadAvailableModels(),\n                new Promise((_, reject) => setTimeout(() => reject(new Error('Models loading timeout')), 30000))\n            ]);\n            console.log('EmailProcessor: Models loaded successfully, count:', this.availableModels.length);\n        } catch (error) {\n            console.error('EmailProcessor: Initialization error:', error);\n            // Use fallback models on error\n            this.availableModels = this.getOfflineAllowedModels();\n            console.log('EmailProcessor: Using fallback models, count:', this.availableModels.length);\n        }\n    }\n\n    async getStoredSettings() {\n        return new Promise((resolve) => {\n            chrome.storage.sync.get([\n                'openRouterKey', 'postmarkApiKey', 'fromEmail', \n                'inboundConfirmedEmail', 'toTentativeEmail', 'toConfirmedEmail', 'aiModel'\n            ], resolve);\n        });\n    }\n\n    async saveSettings(settings) {\n        return new Promise((resolve) => {\n            chrome.storage.sync.set(settings, resolve);\n        });\n    }\n\n    async loadAvailableModels() {\n        try {\n            // Check cache first\n            const cached = await this.getCachedModels();\n            if (cached && cached.timestamp && (Date.now() - cached.timestamp < 15 * 60 * 1000)) {\n                return this.filterAllowedModels(cached.models || []);\n            }\n\n            if (!this.openRouterKey) {\n                console.warn('No OpenRouter API key configured');\n                return this.getAllowedModelsOffline();\n            }\n\n            const response = await fetch('https://openrouter.ai/api/v1/models', {\n                headers: {\n                    'Authorization': `Bearer ${this.openRouterKey}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}`);\n            }\n\n            const data = await response.json();\n            const allModels = data.data || [];\n\n            // Cache the results\n            await this.setCachedModels(allModels);\n            \n            // Filter to only allowed models\n            return this.filterAllowedModels(allModels);\n        } catch (error) {\n            console.error('Error loading models:', error);\n            return this.getAllowedModelsOffline();\n        }\n    }\n\n    getAllowedModelsOffline() {\n        return this.getOfflineAllowedModels();\n    }\n\n    filterAllowedModels(allModels) {\n        if (typeof ALLOWED_MODEL_IDS === 'undefined' || typeof PREFERRED_ORDER === 'undefined') {\n            throw new Error('Shared model configuration not loaded - models-config.js import failed');\n        }\n\n        // Filter models to only include allowed ones\n        const filteredModels = allModels.filter(model => \n            ALLOWED_MODEL_IDS.includes(model.id)\n        );\n\n        // Add any missing models with fallback names\n        const foundIds = filteredModels.map(m => m.id);\n        const missingIds = ALLOWED_MODEL_IDS.filter(id => !foundIds.includes(id));\n        \n        missingIds.forEach(id => {\n            const fallbackModel = ALLOWED_MODELS.find(m => m.id === id);\n            if (fallbackModel) {\n                filteredModels.push(fallbackModel);\n            }\n        });\n\n        // Sort models with preferred order\n        return filteredModels.sort((a, b) => {\n            const aIndex = PREFERRED_ORDER.indexOf(a.id);\n            const bIndex = PREFERRED_ORDER.indexOf(b.id);\n            return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n        });\n    }\n\n    async getCachedModels() {\n        return new Promise((resolve) => {\n            chrome.storage.local.get(['modelsCache'], (result) => {\n                resolve(result.modelsCache || null);\n            });\n        });\n    }\n\n    async setCachedModels(models) {\n        return new Promise((resolve) => {\n            chrome.storage.local.set({\n                modelsCache: {\n                    models: models,\n                    timestamp: Date.now()\n                }\n            }, resolve);\n        });\n    }\n\n    async processContent(params) {\n        const {\n            url,\n            html,\n            instructions = '',\n            screenshot = null,\n            tentative = true,\n            multiday = false,\n            reviewMode = 'direct',\n            aiModel = null\n        } = params;\n\n        try {\n            // Use the model from params if provided, otherwise use stored model\n            const modelToUse = aiModel || this.aiModel;\n            console.log('\uD83E\uDD16 Using AI model:', modelToUse);\n            \n            // Build the prompt\n            const prompt = this.buildPrompt(html, instructions, url, screenshot, tentative, multiday);\n            \n            // Call AI model with the specified model\n            const aiResponse = await this.callAiModel(prompt, modelToUse, multiday);\n            \n            // Parse and validate response\n            const parsedData = this.parseAiResponse(aiResponse);\n            \n            // Generate ICS\n            const icsContent = await this.generateICS(parsedData, tentative, multiday);\n            \n            // Determine recipient email\n            const recipientEmail = tentative ? this.toTentativeEmail : this.toConfirmedEmail;\n            \n            if (reviewMode === 'review') {\n                // Return for review\n                const confirmationToken = this.generateConfirmationToken();\n                await this.storeConfirmationData(confirmationToken, {\n                    icsContent,\n                    recipientEmail,\n                    emailSubject: this.generateEmailSubject(parsedData),\n                    parsedData\n                });\n                \n                return {\n                    needsReview: true,\n                    confirmationToken,\n                    icsContent,\n                    recipientEmail,\n                    emailSubject: this.generateEmailSubject(parsedData)\n                };\n            } else {\n                // Send directly\n                await this.sendEmail(recipientEmail, this.generateEmailSubject(parsedData), icsContent, parsedData);\n                return {\n                    message: 'Calendar invite sent successfully!',\n                    icsContent\n                };\n            }\n        } catch (error) {\n            console.error('Error processing content:', error);\n            throw error;\n        }\n    }\n\n    stripTrackingParameters(url) {\n        if (!url) return url;\n        \n        try {\n            const urlObj = new URL(url);\n            const params = new URLSearchParams(urlObj.search);\n            \n            // List of tracking parameters to remove\n            const trackingParams = [\n                'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content',\n                'utm_id', 'utm_source_platform', 'utm_creative_format', 'utm_marketing_tactic',\n                'fbclid', 'gclid', 'dclid', 'msclkid',\n                'mc_cid', 'mc_eid', // Mailchimp\n                '_ga', '_gid', '_gac', // Google Analytics\n                'ref', 'referer', 'referrer'\n            ];\n            \n            // Remove tracking parameters\n            let hasChanges = false;\n            for (const param of trackingParams) {\n                if (params.has(param)) {\n                    params.delete(param);\n                    hasChanges = true;\n                }\n            }\n            \n            // Only rebuild if we removed something\n            if (hasChanges) {\n                urlObj.search = params.toString();\n                return urlObj.toString();\n            }\n            \n            return url;\n        } catch (error) {\n            console.error('Error stripping tracking parameters:', error);\n            return url;\n        }\n    }\n    \n    buildPrompt(html, instructions, url, screenshot, tentative, multiday) {\n        console.log('\uD83D\uDD27 EmailProcessor buildPrompt v3.0 - System prompt separation');\n        console.log('\uD83D\uDCC5 Multi-day mode:', multiday);\n        \n        // Strip tracking parameters from URL\n        const cleanUrl = url ? this.stripTrackingParameters(url) : url;\n        \n        // Build user content that will be sent separately from system prompt\n        let userContent = '';\n        \n        // Add mode-specific instructions\n        if (multiday) {\n            userContent += 'MULTI-DAY MODE: Extract ALL related performances/sessions as SEPARATE events.\\n\\n';\n        } else {\n            userContent += 'SINGLE EVENT MODE: Focus on extracting ONLY the main/primary event.\\n\\n';\n        }\n        \n        // Add event status\n        userContent += `Event status: ${tentative ? 'Tentative' : 'Confirmed'}\\n\\n`;\n        \n        // Add special instructions if provided\n        if (instructions) {\n            userContent += `Special instructions: ${instructions}\\n\\n`;\n        }\n        \n        // Add source URL if provided\n        if (cleanUrl) {\n            userContent += `Source URL: ${cleanUrl}\\n\\n`;\n        }\n        \n        // Add the main content to analyze\n        userContent += 'Content to analyze:\\n' + html;\n\n        return userContent;\n    }\n\n    async callAiModel(prompt, modelToUse = null, multiday = false) {\n        if (!this.openRouterKey) {\n            throw new Error('OpenRouter API key not configured');\n        }\n        \n        const model = modelToUse || this.aiModel;\n        console.log('\uD83D\uDD27 callAiModel - Sending system + user messages to model:', model);\n        console.log('\uD83D\uDCC5 Multi-day mode in callAiModel:', multiday);\n\n        // Use the injected system prompt from build time\n        const systemPrompt = INJECTED_SYSTEM_PROMPT;\n        console.log('\u2705 System prompt loaded from build injection, length:', systemPrompt.length);\n        \n        // Format the user content with the specific parameters\n        const userContent = `${prompt}`;\n\n        // Create timeout promise\n        const timeoutPromise = new Promise((_, reject) => \n            setTimeout(() => reject(new Error(`Request timed out after ${this.requestTimeout}ms`)), this.requestTimeout)\n        );\n        \n        // Create fetch promise\n        const fetchPromise = fetch('https://openrouter.ai/api/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.openRouterKey}`,\n                'Content-Type': 'application/json',\n                'HTTP-Referer': chrome.runtime.getURL(''),\n                'X-Title': 'Email to ICS Chrome Extension'\n            },\n            body: JSON.stringify({\n                model: model,\n                messages: [\n                    {\n                        role: 'system',\n                        content: systemPrompt\n                    },\n                    {\n                        role: 'user', \n                        content: userContent\n                    }\n                ],\n                max_tokens: this.maxTokens,\n                temperature: 0.1,\n                response_format: { \n                    type: \"json_schema\",\n                    json_schema: {\n                        name: \"chrome_extension_response\",\n                        strict: true,\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                \"events\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"summary\": { \"type\": \"string\" },\n                                            \"location\": { \"type\": \"string\" },\n                                            \"start_date\": { \"type\": \"string\" },\n                                            \"start_time\": { \"type\": [\"string\", \"null\"] },\n                                            \"end_date\": { \"type\": \"string\" },\n                                            \"end_time\": { \"type\": [\"string\", \"null\"] },\n                                            \"description\": { \"type\": \"string\" },\n                                            \"timezone\": { \"type\": \"string\" },\n                                            \"url\": { \"type\": \"string\" }\n                                        },\n                                        \"required\": [\"summary\", \"location\", \"start_date\", \"end_date\", \"description\", \"timezone\", \"url\"],\n                                        \"additionalProperties\": false\n                                    },\n                                    \"minItems\": 1,\n                                    \"maxItems\": multiday ? 50 : 1\n                                }\n                            },\n                            required: [\"events\"],\n                            additionalProperties: false\n                        }\n                    }\n                }\n            })\n        });\n        \n        console.log(`\uD83D\uDD52 Making API request to ${model} with ${this.requestTimeout/1000}s timeout...`);\n        const startTime = Date.now();\n        const response = await Promise.race([fetchPromise, timeoutPromise]);\n        const duration = Date.now() - startTime;\n        console.log(`\u26A1 API request completed in ${duration}ms`);\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`OpenRouter API error: ${response.status} ${errorText}`);\n        }\n\n        const data = await response.json();\n        return data.choices[0]?.message?.content || '';\n    }\n\n    parseAiResponse(response) {\n        try {\n            // Clean up response - remove any markdown formatting\n            let cleaned = response.trim();\n            if (cleaned.startsWith('```json')) {\n                cleaned = cleaned.replace(/```json\\n?/, '').replace(/\\n?```$/, '');\n            } else if (cleaned.startsWith('```')) {\n                cleaned = cleaned.replace(/```\\n?/, '').replace(/\\n?```$/, '');\n            }\n            \n            const parsed = JSON.parse(cleaned);\n            \n            // Expect \"events\" array in all cases\n            if (!parsed.events) {\n                throw new Error('Missing required field: events');\n            }\n            \n            if (!Array.isArray(parsed.events)) {\n                throw new Error('events field must be an array');\n            }\n            \n            if (parsed.events.length === 0) {\n                throw new Error('events array cannot be empty');\n            }\n            \n            // Validate each event\n            for (const event of parsed.events) {\n                if (!event.summary) {\n                    throw new Error('Missing required field: summary in event');\n                }\n                if (!event.location) {\n                    throw new Error('Missing required field: location in event');\n                }\n                if (!event.start_date) {\n                    throw new Error('Missing required field: start_date in event');\n                }\n                if (!event.end_date) {\n                    throw new Error('Missing required field: end_date in event');\n                }\n                if (!event.description) {\n                    throw new Error('Missing required field: description in event');\n                }\n                if (!event.timezone) {\n                    throw new Error('Missing required field: timezone in event');\n                }\n                if (!event.url) {\n                    throw new Error('Missing required field: url in event');\n                }\n            }\n            \n            return parsed.events;\n        } catch (error) {\n            console.error('Error parsing AI response:', error);\n            console.error('Raw response:', response);\n            throw new Error(`Failed to parse AI response: ${error.message}`);\n        }\n    }\n\n    async generateICS(eventData, tentative, multiday) {\n        console.log('\uD83C\uDFAB EmailProcessor generateICS v2.0 - Multi-day ICS generation');\n        console.log('\uD83D\uDCCA Event data received:', eventData);\n        console.log('\uD83D\uDD22 Is array?', Array.isArray(eventData));\n        console.log('\uD83D\uDCDD Event count:', Array.isArray(eventData) ? eventData.length : 1);\n        \n        // Handle both single events and arrays of events\n        const events = Array.isArray(eventData) ? eventData : [eventData];\n        \n        // Helper functions\n        const escapeText = (text) => {\n            if (!text) return '';\n            return text.replace(/\\\\/g, '\\\\\\\\')\n                      .replace(/;/g, '\\\\;')\n                      .replace(/,/g, '\\\\,')\n                      .replace(/\\n/g, '\\\\n')\n                      .replace(/\\r/g, '');\n        };\n        \n        const formatDate = (date, allDay = false) => {\n            if (allDay) {\n                return date.toISOString().split('T')[0].replace(/-/g, '');\n            } else {\n                return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n            }\n        };\n        \n        // Start building ICS content\n        let icsContent = [\n            'BEGIN:VCALENDAR',\n            'VERSION:2.0',\n            'PRODID:-//Email to ICS Extension//EN',\n            'CALSCALE:GREGORIAN',\n            'METHOD:REQUEST'\n        ];\n        \n        // Add each event\n        for (const singleEvent of events) {\n            const uid = this.generateUID();\n            const now = new Date();\n            const timestamp = now.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n            \n            // Parse dates\n            const startDate = new Date(singleEvent.start_date + (singleEvent.start_time ? `T${singleEvent.start_time}:00` : 'T00:00:00'));\n            let endDate;\n            \n            if (singleEvent.end_date && singleEvent.end_time) {\n                endDate = new Date(singleEvent.end_date + `T${singleEvent.end_time}:00`);\n            } else if (singleEvent.end_date) {\n                endDate = new Date(singleEvent.end_date + 'T23:59:59');\n            } else if (singleEvent.start_time === null) {\n                // All-day event, end next day\n                endDate = new Date(startDate);\n                endDate.setDate(endDate.getDate() + 1);\n            } else {\n                // Default to 1 hour duration\n                endDate = new Date(startDate);\n                endDate.setHours(endDate.getHours() + 1);\n            }\n            \n            const isAllDay = singleEvent.start_time === null;\n            const dtstart = isAllDay ? formatDate(startDate, true) : formatDate(startDate);\n            const dtend = isAllDay ? formatDate(endDate, true) : formatDate(endDate);\n            \n            // Add event to ICS\n            icsContent.push('BEGIN:VEVENT');\n            icsContent.push(`UID:${uid}`);\n            icsContent.push(`DTSTAMP:${timestamp}`);\n            icsContent.push(`CREATED:${timestamp}`);\n            icsContent.push(`LAST-MODIFIED:${timestamp}`);\n            icsContent.push(`SUMMARY:${escapeText(singleEvent.summary)}`);\n            \n            // Add optional fields\n            if (singleEvent.description) {\n                icsContent.push(`DESCRIPTION:${escapeText(singleEvent.description)}`);\n            }\n            \n            if (singleEvent.location) {\n                icsContent.push(`LOCATION:${escapeText(singleEvent.location)}`);\n            }\n            \n            if (singleEvent.url) {\n                icsContent.push(`URL:${escapeText(singleEvent.url)}`);\n            }\n            \n            // Add dates\n            if (isAllDay) {\n                icsContent.push(`DTSTART;VALUE=DATE:${dtstart}`);\n                icsContent.push(`DTEND;VALUE=DATE:${dtend}`);\n            } else {\n                icsContent.push(`DTSTART:${dtstart}`);\n                icsContent.push(`DTEND:${dtend}`);\n            }\n            \n            // Add status\n            if (tentative) {\n                icsContent.push('STATUS:TENTATIVE');\n            } else {\n                icsContent.push('STATUS:CONFIRMED');\n            }\n            \n            // Add organizer if configured\n            if (this.fromEmail) {\n                icsContent.push(`ORGANIZER:mailto:${this.fromEmail}`);\n            }\n            \n            icsContent.push('END:VEVENT');\n        }\n        \n        icsContent.push('END:VCALENDAR');\n        \n        return icsContent.join('\\r\\n');\n    }\n\n    generateUID() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}@email-to-ics`;\n    }\n\n    generateEmailSubject(eventData) {\n        // eventData is now always an array of events\n        const events = Array.isArray(eventData) ? eventData : [eventData];\n        if (events.length === 1) {\n            return `Calendar Invite: ${events[0].summary}`;\n        } else {\n            return `Calendar Invites: ${events.length} events`;\n        }\n    }\n\n    generateConfirmationToken() {\n        return `confirm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    async storeConfirmationData(token, data) {\n        return new Promise((resolve) => {\n            const storageKey = `confirmation_${token}`;\n            chrome.storage.local.set({ [storageKey]: data }, resolve);\n        });\n    }\n\n    async getConfirmationData(token) {\n        return new Promise((resolve) => {\n            const storageKey = `confirmation_${token}`;\n            chrome.storage.local.get([storageKey], (result) => {\n                console.log('Getting confirmation data for key:', storageKey);\n                console.log('Storage result:', result);\n                resolve(result[storageKey] || null);\n            });\n        });\n    }\n\n    async sendEmail(recipientEmail, subject, icsContent, eventData) {\n        if (!this.postmarkApiKey) {\n            throw new Error('Postmark API key not configured');\n        }\n\n        // eventData is now always an array of events\n        const events = Array.isArray(eventData) ? eventData : [eventData];\n        \n        let emailBody = `Please find the calendar invitation${events.length > 1 ? 's' : ''} attached.\\n\\n`;\n        \n        if (events.length === 1) {\n            const event = events[0];\n            emailBody += `Event: ${event.summary}\\n`;\n            emailBody += event.location ? `Location: ${event.location}\\n` : '';\n            emailBody += event.description ? `Description: ${event.description}\\n` : '';\n        } else {\n            emailBody += `Events (${events.length}):\\n`;\n            events.forEach((event, index) => {\n                emailBody += `\\n${index + 1}. ${event.summary}\\n`;\n                emailBody += event.location ? `   Location: ${event.location}\\n` : '';\n                emailBody += event.start_date ? `   Date: ${event.start_date}\\n` : '';\n            });\n        }\n        \n        emailBody += '\\nThis invitation was generated automatically.';\n\n        const response = await fetch('https://api.postmarkapp.com/email', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'X-Postmark-Server-Token': this.postmarkApiKey\n            },\n            body: JSON.stringify({\n                From: this.fromEmail,\n                To: recipientEmail,\n                Subject: subject,\n                TextBody: emailBody,\n                Attachments: [\n                    {\n                        Name: 'invite.ics',\n                        Content: btoa(unescape(encodeURIComponent(icsContent))),\n                        ContentType: 'text/calendar'\n                    }\n                ]\n            })\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`Postmark API error: ${response.status} ${errorText}`);\n        }\n\n        return await response.json();\n    }\n\n    async confirmEvent(confirmationToken) {\n        const data = await this.getConfirmationData(confirmationToken);\n        if (!data) {\n            throw new Error('Invalid or expired confirmation token');\n        }\n\n        await this.sendEmail(data.recipientEmail, data.emailSubject, data.icsContent, data.parsedData);\n        \n        // Clean up confirmation data\n        const storageKey = `confirmation_${confirmationToken}`;\n        chrome.storage.local.remove([storageKey]);\n        \n        return {\n            message: 'Calendar invite sent successfully!',\n            icsContent: data.icsContent\n        };\n    }\n}\n\n// Export for use in background script\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = EmailProcessor;\n}\n\n// Make globally available for service worker importScripts\nif (typeof globalThis !== 'undefined') {\n    globalThis.EmailProcessor = EmailProcessor;\n} else if (typeof self !== 'undefined') {\n    self.EmailProcessor = EmailProcessor;\n} else if (typeof global !== 'undefined') {\n    global.EmailProcessor = EmailProcessor;\n}"],
  "mappings": "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",
  "names": []
}
