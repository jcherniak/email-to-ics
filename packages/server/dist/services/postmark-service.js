import { Client } from 'postmark';
/**
 * Postmark email service - matches PHP Postmark integration
 */
export class PostmarkService {
    client;
    config;
    constructor(config) {
        this.config = config;
        this.client = new Client(config.POSTMARK_API_KEY);
    }
    /**
     * Send email with ICS attachment - matches PHP functionality
     */
    async sendIcsEmail(options) {
        try {
            const { to, subject, description, icsContent, eventTitle, isTentative = false } = options;
            // Create ICS attachment
            const attachment = {
                Name: `${this.sanitizeFilename(eventTitle)}.ics`,
                Content: Buffer.from(icsContent).toString('base64'),
                ContentType: 'text/calendar; charset=utf-8; method=REQUEST',
                ContentID: null
            };
            // Build email content
            const textBody = this.buildTextBody(description, eventTitle, isTentative);
            const htmlBody = this.buildHtmlBody(description, eventTitle, isTentative);
            const result = await this.client.sendEmail({
                From: this.config.FROM_EMAIL,
                To: to,
                Subject: subject,
                TextBody: textBody,
                HtmlBody: htmlBody,
                Attachments: [attachment],
                Tag: isTentative ? 'tentative-event' : 'confirmed-event'
            });
            return {
                success: true,
                messageId: result.MessageID
            };
        }
        catch (error) {
            console.error('Failed to send email via Postmark:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    /**
     * Process inbound webhook from Postmark - matches PHP webhook handling
     */
    async processInboundEmail(webhookData) {
        try {
            // Validate webhook signature if needed
            // TODO: Implement signature validation for security
            const { HtmlBody, TextBody, Subject, FromFull, Attachments } = webhookData;
            // Extract content for AI processing
            const content = {
                html: HtmlBody,
                text: TextBody,
                subject: Subject,
                from: FromFull?.Email,
                attachments: Attachments || []
            };
            return {
                success: true,
                content
            };
        }
        catch (error) {
            console.error('Failed to process inbound email:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    /**
     * Send error notification email
     */
    async sendErrorNotification(error, context) {
        try {
            await this.client.sendEmail({
                From: this.config.FROM_EMAIL,
                To: this.config.ERROR_EMAIL,
                Subject: `Email-to-ICS Error: ${context}`,
                TextBody: `An error occurred in the Email-to-ICS system:\n\nContext: ${context}\nError: ${error.message}\nStack: ${error.stack}`,
                Tag: 'error-notification'
            });
        }
        catch (emailError) {
            console.error('Failed to send error notification:', emailError);
        }
    }
    buildTextBody(description, eventTitle, isTentative) {
        const status = isTentative ? 'TENTATIVE' : 'CONFIRMED';
        return `
Calendar Event ${status}: ${eventTitle}

${description}

This email contains a calendar invitation (.ics file) that you can import into your calendar application.

---
Generated by Email-to-ICS
    `.trim();
    }
    buildHtmlBody(description, eventTitle, isTentative) {
        const status = isTentative ? 'TENTATIVE' : 'CONFIRMED';
        const statusColor = isTentative ? '#f39c12' : '#27ae60';
        return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Calendar Event: ${eventTitle}</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
  <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
    <h2 style="color: ${statusColor};">Calendar Event ${status}</h2>
    <h3>${eventTitle}</h3>
    
    <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
      ${description.replace(/\n/g, '<br>')}
    </div>
    
    <p style="font-size: 14px; color: #666;">
      This email contains a calendar invitation (.ics file) that you can import into your calendar application.
    </p>
    
    <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
    <p style="font-size: 12px; color: #999; text-align: center;">
      Generated by Email-to-ICS
    </p>
  </div>
</body>
</html>
    `.trim();
    }
    sanitizeFilename(filename) {
        return filename
            .replace(/[^a-z0-9\s-]/gi, '') // Remove special characters
            .replace(/\s+/g, '-') // Replace spaces with hyphens
            .toLowerCase()
            .substring(0, 50); // Limit length
    }
}
